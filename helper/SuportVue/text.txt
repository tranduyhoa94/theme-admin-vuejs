public function getProgramParticipantsHasMatch(Request $request, $clientId, $programId)
{
	$perPage = $request->input('perPage', 10);

	if($request->has('sort') && $request->input('sort')){
	    $sortBy = explode('|', $request->input('sort'));
	}else{
	    $sortBy = explode('|', 'users|lastname|asc');
	}

	$searchBy = [];

	if($request->has('search') && $request->input('search')){
	    $searchValues = explode(';', $request->input('search'));

	    foreach ($searchValues as $val) {
		$tmp = explode(':', $val);

		if(count($tmp) > 1){
		    $searchBy[$tmp[0]] = $tmp[1];
		}
	    }

	}

	$userId = auth()->user()->id_user;

	$participants = $this->programParticipantRepo->skipPresenter(true)->getProgramParticipantsHasMatch($clientId, $programId, $userId, $sortBy, $searchBy, $perPage);

	return $this->responseSuccess('Get participants successfully!', $participants);
}

###################################################################################################################################

	public function getProgramParticipantsHasMatch($clientId, $programId, $userId, array $sortBy, array $searchBy, $perPage)
    {
        return $this->scopeQuery(function($query) use ($clientId, $programId, $userId, $sortBy, $searchBy){
            $query = $query
                    ->select('program_participants.*', 'users.*')
                    ->selectRaw('((case program_participants.role when "mentor" then "Yes" when "both" then "Yes" else "No" end)) as mentor_role')
                    ->selectRaw('((case program_participants.role when "mentee" then "Yes" when "both" then "Yes" else "No" end)) as mentee_role')
                    ->join('users', function($join) use ($userId){
                        $join->on('program_participants.id_user', '=', 'users.id_user')
                            ->where('users.id_user', '<>', '')
                            ->where('users.id_user', '<>', $userId)
                            ->whereNull('users.deleted_at');
                    })
                    ->join('client_users', function($join){
                        $join->on('program_participants.id_client_user', '=', 'client_users.id_client_user')
                            ->where('client_users.is_champion', 0);
                    })
                    ->where('program_participants.id_client', $clientId)
                    ->where('program_participants.id_program', $programId)
                    ->where('program_participants.status', 1)
                    ->whereRaw('
                        (SELECT count(*) FROM program_pool_matches as p WHERE p.id_program = ' . $programId . ' AND p.id_client = ' . $clientId . ' AND p.publish  = 1 AND (p.matched_participant_id = program_participants.id_program_participant or p.id_participant = program_participants.id_program_participant) ) > 0
                    ');

            // search by
            if(!empty($searchBy['firstname'])){
                $query->where('users.firstname', 'like', '%' . $searchBy['firstname'] . '%');
            }

            if(!empty($searchBy['lastname'])){
                $query->where('users.lastname', 'like', '%' . $searchBy['lastname'] . '%');
            }

            if(!empty($searchBy['email'])){
                $query->where('users.email', 'like', '%' . $searchBy['email'] . '%');
            }

            if(!empty($searchBy['mentor']) && !empty($searchBy['mentee'])){
                if($searchBy['mentor'] === 'All' && $searchBy['mentee'] === 'All'){
                    $query->whereIn('program_participants.role', ['mentor', 'mentee', 'both']);
                }

                if($searchBy['mentor'] === 'All' && $searchBy['mentee'] === 'Yes'){
                    $query->where(function($q){
                        $q->where('program_participants.role', 'mentee')->orWhere('program_participants.role', 'both');
                    });
                }

                if($searchBy['mentor'] === 'All' && $searchBy['mentee'] === 'No'){
                    $query->where(function($q){
                        $q->where('program_participants.role', 'mentor')->orWhere('program_participants.role', '');
                    });
                }

                if($searchBy['mentor'] === 'Yes' && $searchBy['mentee'] === 'All'){
                    $query->where(function($q){
                        $q->where('program_participants.role', 'mentor')->orWhere('program_participants.role', 'both');
                    });
                }

                if($searchBy['mentor'] === 'Yes' && $searchBy['mentee'] === 'Yes'){
                    $query->where('program_participants.role', 'both');
                }

                if($searchBy['mentor'] === 'Yes' && $searchBy['mentee'] === 'No'){
                    $query->where('program_participants.role', 'mentor');
                }

                if($searchBy['mentor'] === 'No' && $searchBy['mentee'] === 'All'){
                    $query->where(function($q){
                        $q->where('program_participants.role', 'mentee')->orWhere('program_participants.role', '');
                    });
                }

                if($searchBy['mentor'] === 'No' && $searchBy['mentee'] === 'Yes'){
                    $query->where('program_participants.role', 'mentee');
                }

                if($searchBy['mentor'] === 'No' && $searchBy['mentee'] === 'No'){
                    $query->whereNotIn('program_participants.role', ['mentor', 'mentee', 'both']);
                }

            }

            // order by
            if(count($sortBy) > 2){
                if ($sortBy[0] == 'virtual_fields') {
                    $query = $query->orderByRaw($sortBy[1] . ' ' . $sortBy[2]);
                }else{
                    $query = $query->orderBy($sortBy[0] . '.' . $sortBy[1], $sortBy[2]);
                }
            }

            // group by
            $query->groupBy('program_participants.id_user');

            return $query;

        })->paginate($perPage);
    }
